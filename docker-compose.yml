services:
  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: sandy_db
      POSTGRES_USER: sandy
      POSTGRES_PASSWORD: sandy
    ports:
      - "5432:5432"
    volumes:
      - ./backend/postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 6

  redis:
    image: redis:7
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./backend/redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 6

  adminer:
    image: adminer:latest
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - db

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://sandy:sandy@db:5432/sandy_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,0.0.0.0,sandy-backend-1
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    # Run migrations then start Django development server (adjust for production)
    command: sh -c "python manage.py migrate --noinput && python manage.py runserver 0.0.0.0:8000"

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: .env
    environment:
      - API_HOST=http://backend:8000
      - NEXT_PUBLIC_API_HOST=http://localhost:8000
      - DATABASE_URL=postgresql://sandy:sandy@db:5432/sandy_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./:/app
    ports:
      - "3000:3000"
    depends_on:
      - backend
    command: sh -c "node scripts/setup.js && npm run dev"